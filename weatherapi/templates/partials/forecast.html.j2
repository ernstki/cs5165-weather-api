<!--
This homework assignment will have you implement an UI for HW2 with a
dynamic approach that uses asynchronous JavaScript requests to send the
user-inputted data to the ReST API you built, receive the structured results,
and then publish them into the page without refreshing the whole page again.

The Webpage should take an input date and then plot the Forecasts TMIN, TMAX
for atl Next Five Days.

BONUS 25 Points: Also, Plot weather forecast for at least 5 DAYS from a Third
Party Weather Forecasting Service such as Yahoo Weather, NCDC, Weather
Underground, Weather, Open Weather Map,
-->
    <div id="weatherSearch" class="container">

      <div class="row">

        <!-- input form -->
        <div id="weatherSearchForm" class="col-md-5">
            <div class="form-inline">
              <div class="form-group">
                <h2>Forecast for date +
                  <input class="form-control input-lg text-center" size="2"
                         type="text" v-model="skipDays"
                         v-bind:disabled="!resetEnabled"
                         v-on:keyup.enter.prevent="skipDaysUpdated">
                  days
                </h2>
              </div>
            </div>

          <div class="form-group"
               v-bind:class="getDateFailed ? 'has-error' : ''">
            <div class="input-group">
{#-
              <template v-if="dateSkipperEnabled">
#}
                <span class="input-group-btn">
                  <button v-bind:disabled="!resetEnabled"
                          class="btn btn-lg btn-default"
                          v-on:click="yearSkipStart"
                          title="Jump to beginning of year">
                    <i class="glyphicon glyphicon glyphicon-fast-backward"></i>
                  </button>
                  <button v-bind:disabled="!resetEnabled"
                          class="btn btn-lg btn-default"
                          v-on:click="periodSkipPrev"
                          v-bind:title="skipInEnglish('back')">
                    <i class="glyphicon glyphicon glyphicon-step-backward"></i>
                  </button>
                </span> <!-- skip backward -->
{#-
              </template>
#}
              <input type="text" class="form-control input-lg text-center"
                     placeholder="" v-model="inputDate" v-focus.lazy="inputDateFocused"
                     @click="inputDateFocused = true" @blur="inputDateFocused = false"
                     title="Another hint: space bar advances by one forecast period"
                     v-on:keydown.space.prevent="" v-on:keyup.space.prevent="periodSkipNext"
                     v-on:keydown.up.prevent="" v-on:keyup.up.prevent="dayAdvance"
                     v-on:keydown.down.prevent="" v-on:keyup.down.prevent="dayRewind"
                     v-on:keydown.pgup.prevent="" v-on:keyup.pgup.prevent="yearAdvance"
                     v-on:keydown.pgdn.prevent="" v-on:keyup.pgdn.prevent="yearRewind"
                     v-on:keyup.enter.prevent="inputDateUpdated"
                     v-on:keydown="enableResetButton">
{#-
              <i class="glyphicon glyphicon-remove form-control-feedback"></i>
#}
              <span class="input-group-btn">
                <button v-bind:disabled="!resetEnabled"
                        class="btn btn-lg btn-default"
                        v-on:click="periodSkipNext"
                        v-bind:title="skipInEnglish('ahead')">

                  <i class="glyphicon glyphicon glyphicon-step-forward"></i>
                </button>
                <button v-bind:disabled="!resetEnabled"
                        class="btn btn-lg btn-default"
                        v-on:click="yearSkipEnd"
                        title="Jump to end of year">
                  <i class="glyphicon glyphicon glyphicon-fast-forward"></i>
                </button>
              </span> <!-- skip forward -->
{#-
                <button v-bind:disabled="!resetEnabled"
                        class="btn btn-lg btn-default"
                        v-on:click="resetForm">
                  <i class="glyphicon glyphicon-remove-circle"></i>
                </button>
#}
            </div>

            <template v-if="getDateFailed">
              <p class="help-block text-center">
                There was an error retrieving that date.
                Sorry about that!
              </p>
            </template>
            <template v-else>
              <p class="help-block text-center">
                Enter a date in <tt>YYYYMMDD</tt> or <tt>YYYY-MM-DD</tt>
                format.<br>
                <em>Hint: try the up/down arrow keys and PgUp/PgDn.</em>
              </p>
            </template>
          </div> <!--/.form-group-->
          <!-- /input form -->

          <div class="well">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th width="33%">Date</th>
                  <th widht="33%">Min. Temp</th>
                  <th width="33%">Max. Temp</th>
                </tr>
              </thead>
              <tbody>
                <tr v-if="!forecastDates.length">
                  <td class="text-muted">DATE</td>
                  <td class="text-muted">TMIN</td>
                  <td class="text-muted">TMAX</td>
                </tr>
                <template v-if="forecastDates.length">
                  <tr v-for="date in forecastDates">
                    <td class="date-date" style="vertical-align:bottom">
                      <span v-text="isoDate(date.DATE)"></span>
                    </td>
                    <td class="date-tmin">
                      <h4 style="margin:0;">
                        <span v-text="date.TMIN" class="label label-round"
                           v-bind:class="{ 'label-info': isFreezing(date.TMIN),
                                           'label-default': !isFreezing(date.TMIN) }">
                        </span>
                      </h4>
                    </td>
                    <td class="date-tmax">
                      <h4 style="margin:0;">
                        <span v-text="date.TMAX" class="label label-round"
                            v-bind:class="{ 'label-danger': isSweltering(date.TMAX),
                                            'label-default': !isSweltering(date.TMAX) }">
                        </span>
                      </h4>
                    </td>
                  </tr>
                </template>
              </tbody>
            </table>
          </div> <!--/.well-->

          <div class="form-group">
{#-
            <button class="btn btn-md btn-default"
                    v-bind:disabled="!resetEnabled" v-on:click="resetForm">
              Reset
            </button>
#}
            <button class="btn btn-md btn-default"
                    title="See historical temperature for today's date in the chosen year"
                    v-on:click="goToTodaysDate">
              Temperature for Today's Date
            </button>

            <button class="btn btn-md btn-primary pull-right"
                    title="Reset form and chart settings to defaults"
                    v-bind:disabled="!resetEnabled" v-on:click="resetForm">
              Reset Form &amp; Chart
            </button>
          </div> <!--/.input-group-->
{#-
          <div class="clearfix"></div>
#}

        </div> <!--/#weatherSearchForm-->

        <div class="col-md-1"></div>

        <div id="weatherSearchChart" class="col-md-6 text-center">
          <h2 id="chartTitle" v-text="chartTitle">Highs &amp; Lows</h2>
          <canvas id="five-day-forecast" width="400" height="300"
                  no-v-bind:style="chartDimmed ? 'opacity:0.5' : 'opacity:1.0'">
          </canvas>
        </div>

      </div><!-- /.row -->

    </div><!-- /#weatherSearch.container -->

{{ asset.vendorjs('vue/dist/vue.min.js') }}
{{ asset.vendorjs('vue-resource/dist/vue-resource.min.js') }}
{{ asset.vendorjs('lodash/dist/lodash.min.js') }}
{{ asset.vendorjs('moment/min/moment.min.js') }}
{{ asset.vendorjs('chart.js/dist/Chart.min.js') }}
{{ asset.vendorjs('vue-focus/dist/vue-focus.min.js') }}

<script>
  'use strict';
  var DEFAULT_DATE = '20130101';
  var FORECAST_DAYS = 5;
  var SKIP_INCREMENT = FORECAST_DAYS;  // in days
  var ctx = document.getElementById("five-day-forecast");

  var chart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: _.range(0, FORECAST_DAYS),
      datasets: [
        {
          label: 'Low Temperatures (°F)',
          data:
            _.map(_.range(0, FORECAST_DAYS), function(x){ return 10*x + 15 }),
          backgroundColor: '#36a2eb',
          // backgroundColor: '#3a87ad',  // Bootstrap (2?) colors
        },
        {
          label: 'High Temperatures (°F)',
          data:
            _.map(_.range(0, FORECAST_DAYS), function(x){ return 10*x + 20 }),
          backgroundColor: '#ff6384'
          // backgroundColor: '#b94a48',  // Boostrap (2?) colors
        },
      ]
    },
    options: {
      maintainAspectRatio: true,
      responsive: true,
      scales: {
        yAxes: [{ stacked: false}]
      }
    }
  }); // new Chart

  // Source: https://vuejs.org/v2/api/#keyCodes
  Vue.config.keyCodes = {
    up: [38, 87],    // up arrow or 'w'
    down: [40, 83],  // down arrow or 's'
    pgup: [33],
    pgdn: [34],
  };

  var f = new Vue({
    el: '#weatherSearchForm',

    mixins: [ VueFocus.mixin ],

    data: {
      theDate: '',
      inputDate: '',
      inputDateFocused: true,
      resetEnabled: false,
      forecastDates: [],
      getDateFailed: false,
      dateSkipperEnabled: true,
      skipDays: SKIP_INCREMENT,
    },

    mounted: function() {
        this.loadSampleData();
    },

    methods: {

      inputDateUpdated: function() {
        this.theDate = this.inputDate.replace(/-/g, '');
        this.getForecast();
      },

      skipDaysUpdated: function() {
        this.skipDays = parseInt(this.skipDays);

        // check for NaN or out-of-range values
        if (!isFinite(this.skipDays)
            || typeof this.skipDays !== 'number'
            || this.skipDays < SKIP_INCREMENT)
          this.skipDays = SKIP_INCREMENT;

        else if (this.skipDays > 31)
          this.skipDays = 31;

        c.updateChartTitle();
        this.getForecast();
      },

      enableResetButton: function(e) {
        this.resetEnabled = true;
      },

      resetForm: function(e) {
        this.theDate = '';
        this.inputDate = '';
        this.inputDateFocused = true;
        this.resetEnabled = false;
        this.getDateFailed = false;
        this.forecastDates = [];
        this.skipDays = SKIP_INCREMENT;
        this.loadSampleData();
        // c.resetChart();
      },

      loadSampleData: function() {
        this.inputDate = this.isoDate(DEFAULT_DATE);
        this.inputDateFocused = true;
        this.inputDateUpdated();
      },

      goToTodaysDate: function() {
        var t = moment();  // today's date
        var m = moment(this.inputDate);

        // account for leap years (Feb 29th is the 60th day of the year)
        if (!m.isLeapYear() && t.isLeapYear() && t.dayOfYear() === 60) {
          m.dayOfYear(59);  // set the date to Feb 28th
        } else {
          m.dayOfYear(t.dayOfYear());
        }

        this.inputDate = m.format('YYYY-MM-DD');
        this.inputDateUpdated();
      },

      getForecast: function() {
        this.$http.get('/forecast/' + this.theDate, {
          params: {
            limit: this.skipDays,
            responseType: 'json',
          }
        }).then(function(res) {
          this.forecastDates = res.data;
          // Clear errors and enable the reset button
          this.getDateFailed = false;
          this.resetEnabled = true;
          // update the Chart.js chart with the new forecastDates
          c.updateChart();
        }, function(res) {
          this.getDateFailed = true;
          console.log("Error fetching '" + this.theDate + "': " +
                      res.statusText);
        }); // this.$http.get

      }, // getForecast

      dayAdvance: function() {
        // FIXME: Just store the internal date as a moment for easier math
        this.inputDate = moment(this.inputDate).add(moment.duration(1, 'd'))
                                               .format('YYYY-MM-DD')
        this.inputDateUpdated();
      },

      dayRewind: function() {
        this.inputDate = moment(this.inputDate).subtract(moment.duration(1, 'd'))
                                               .format('YYYY-MM-DD')
        this.inputDateUpdated();
      },

      yearAdvance: function() {
        this.inputDate = moment(this.inputDate).add(moment.duration(1, 'y'))
                                               .format('YYYY-MM-DD')
        this.inputDateUpdated();
      },

      yearRewind: function() {
        this.inputDate = moment(this.inputDate).subtract(moment.duration(1, 'y'))
                                               .format('YYYY-MM-DD')
        this.inputDateUpdated();
      },

      yearSkipStart: function() {
        var m = moment(this.inputDate);
        // if already in first forecast period of the year, go back another
        if (m.dayOfYear() === 1) {
          this.inputDate = m.year(m.year() - 1).format('YYYY-MM-DD')
        } else {
          this.inputDate =
              moment(this.inputDate).dayOfYear(1).format('YYYY-MM-DD');
        }
        this.inputDateUpdated();
      },

      periodSkipPrev: function() {
        var skipMoment = moment.duration(this.skipDays, 'days');
        this.inputDate =
            moment(this.inputDate).subtract(skipMoment).format('YYYY-MM-DD');
        this.inputDateUpdated();
      },

      periodSkipNext: function() {
        var skipMoment = moment.duration(this.skipDays, 'days');
        this.inputDate =
            moment(this.inputDate).add(skipMoment).format('YYYY-MM-DD');
        this.inputDateUpdated();
      },

      yearSkipEnd: function() {
        var m = moment(this.inputDate);
        var daysInYear = m.isLeapYear() ? 366 : 365;
        var startOfFinalForecastPeriod = m.clone()
        startOfFinalForecastPeriod.dayOfYear(daysInYear - this.skipDays + 1);

        // If already *in* the last forecast period of the year, skip to the
        // last week of the next year
        if (m.diff(startOfFinalForecastPeriod, 'days') >= 0) {
          var nextYear = m.year() + 1;
          startOfFinalForecastPeriod.year(nextYear);
        }

        this.inputDate = startOfFinalForecastPeriod.format('YYYY-MM-DD');
        this.inputDateUpdated();
      },

      isoDate: function (date) {
        if (!date) return '';
        return moment(date).format('YYYY-MM-DD');
      },

      skipInEnglish: function(dir) {
        var stems = [ 'zero', 'one', 'two', 'three', 'four', 'five', 'six',
                      'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve',
                      'thir', 'four', 'fif', 'six', 'seven', 'eigh', 'nine'];
        return 'Skip ' + dir + ' ' + stems[this.skipDays]
               + (this.skipDays > 12 ? 'teen' : '')
               + (this.skipDays !== 1 ? ' days' : 'day');
      },

      isFreezing: function(temp) {
        if (temp === '' || typeof temp === 'undefined') return '';
        return temp <= 32;
      },

      isSweltering: function(temp) {
        if (temp === '' || typeof temp === 'undefined') return '';
        return temp >= 90;
      },

    } // methods

  }); // f = new Vue

  var c = new Vue({
    el: '#chartTitle',
    data: {
      defaultTitle: 'Highs & Lows',
      chartTitle: 'Highs & Lows',
      chartDimmed: false,
    },

    mounted: function() {
      this.updateChartTitle();
    },

    methods: {

      resetChartTitle: function() {
        this.chartTitle = this.defaultTitle;
      },

      updateChartTitle: function() {
        this.chartTitle = this.daysInEnglish(f.skipDays) + ' '
                        + this.defaultTitle;
      },

      updateChart: function() {
        chart.data.labels =
          _.map(_.map(f.forecastDates, 'DATE'), f.isoDate);
        chart.data.datasets[0].data = _.map(f.forecastDates, 'TMIN');
        chart.data.datasets[1].data = _.map(f.forecastDates, 'TMAX');
        chart.update();
        this.updateChartTitle();
      },

      resetChart: function() {
        chart.data.datasets[0].data = [];
        chart.data.datasets[1].data = [];
        chart.update();
        this.resetChartTitle();
      },

      daysInEnglish: function(days) {
        if (days > 19) return days + '-day';
        var stems = [ 'Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six',
                      'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve',
                      'Thir', 'Four', 'Fif', 'Six', 'Seven', 'Eigh', 'Nine'];
        return stems[days] + (days > 12 ? 'teen' : '') + '-day';
      },
    },
  });

</script>
