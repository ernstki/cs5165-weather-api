<!--
This homework assignment will have you implement an UI for HW2 with a
dynamic approach that uses asynchronous JavaScript requests to send the
user-inputted data to the ReST API you built, receive the structured results,
and then publish them into the page without refreshing the whole page again.

The Webpage should take an input date and then plot the Forecasts TMIN, TMAX
for atl Next Five Days.

BONUS 25 Points: Also, Plot weather forecast for at least 5 DAYS from a Third
Party Weather Forecasting Service such as Yahoo Weather, NCDC, Weather
Underground, Weather, Open Weather Map,
-->
    <div id="weatherSearch" class="container">

      <div class="row">

        <!-- input form -->
        <div id="weatherSearchForm" class="col-md-5">
            <div class="form-inline">
              <div class="form-group">
                <h2>Forecast for date +
                  <input class="form-control input-lg text-center" size="2"
                         type="text" v-model="skipDays"
                         v-bind:disabled="!resetEnabled"
                         v-on:keyup.enter.prevent="getForecast()">
                  days
                </h2>
              </div>
            </div>

          <div class="form-group"
               v-bind:class="getDateFailed ? 'has-error' : ''">
            <div class="input-group">
{#-
              <template v-if="dateSkipperEnabled">
-#}
                <span class="input-group-btn">
                  <button v-bind:disabled="!resetEnabled"
                          class="btn btn-lg btn-default"
                          v-on:click="yearSkipStart"
                          title="Jump to beginning of year">
                    <i class="glyphicon glyphicon glyphicon-fast-backward"></i>
                  </button>
                  <button v-bind:disabled="!resetEnabled"
                          class="btn btn-lg btn-default"
                          v-on:click="daySkipPrev"
                          v-bind:title="skipInEnglish('back')">
                    <i class="glyphicon glyphicon glyphicon-step-backward"></i>
                  </button>
                </span>
{#-
              </template>
-#}
              <input type="text" class="form-control input-lg text-center"
                     placeholder="Ex. 20130101"
                     v-model="theDate" v-on:keyup.enter.stop="getForecast"
                     v-on:keydown="enableResetButton">
{#-
              <i class="glyphicon glyphicon-remove form-control-feedback"></i>
-#}
              <span class="input-group-btn">
                <button v-bind:disabled="!resetEnabled"
                        class="btn btn-lg btn-default"
                        v-on:click="daySkipNext"
                        v-bind:title="skipInEnglish('ahead')">

                  <i class="glyphicon glyphicon glyphicon-step-forward"></i>
                </button>
                <button v-bind:disabled="!resetEnabled"
                        class="btn btn-lg btn-default"
                        v-on:click="yearSkipEnd"
                        title="Jump to end of year">
                  <i class="glyphicon glyphicon glyphicon-fast-forward"></i>
                </button>
              </span>
{#-
                <button v-bind:disabled="!resetEnabled"
                        class="btn btn-lg btn-default"
                        v-on:click="resetForm">
                  <i class="glyphicon glyphicon-remove-circle"></i>
                </button>
-#}
            </div>
            <template v-if="getDateFailed">
              <p class="help-block text-center">
                Error retrieving date <span v-text="theDate"></span>.
                Sorry about that!
              </p>
            </template>
            <!--v-select label="date" placeholder="Search dates..." :debounce="250"
                      :options="dates" :on-search="getDates"-->
          </div> <!--/.form-group-->
          <!-- /input form -->

          <div class="well">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th width="33%">Date</th>
                  <th widht="33%">Min. Temp</th>
                  <th width="33%">Max. Temp</th>
                </tr>
              </thead>
              <tbody>
                <tr v-if="!forecastDates.length">
                  <td class="text-muted">DATE</td>
                  <td class="text-muted">TMIN</td>
                  <td class="text-muted">TMAX</td>
                </tr>
                <template v-if="forecastDates.length">
                  <tr v-for="date in forecastDates">
                    <td class="date-date" v-text="isoDate(date.DATE)"></td>
                    <td class="date-tmin" v-text="date.TMIN"
                        v-bind:class="{ 'bg-info': isFreezing(date.TMIN) }">
                    </td>
                    <td class="date-tmax" v-text="date.TMAX"
                        v-bind:class="{ 'bg-danger': isSweltering(date.TMAX) }">
                    </td>
                  </tr>
                </template>
              </tbody>
            </table>
          </div> <!--/.well-->

          <div class="form-group">
            <button class="btn btn-md btn-primary pull-right"
                    v-on:click="loadSampleData">
              Load Sample Data
            </button>
            <button class="btn btn-md btn-default"
                    v-bind:disabled="!resetEnabled" v-on:click="resetForm">
              Reset Form &amp; Chart
            </button>
          </div> <!--/.input-group-->

          <div class="clearfix"></div>

        </div> <!--/#weatherSearchForm-->

        <div class="col-md-1"></div>

        <div id="weatherSearchChart" class="col-md-6 text-center">
          <h2 id="chartTitle" v-text="chartTitle">Highs &amp; Lows</h2>
          <canvas id="five-day-forecast" width="400" height="300"
                  no-v-bind:style="chartDimmed ? 'opacity:0.5' : 'opacity:1.0'">
          </canvas>
        </div>

      </div><!-- /.row -->

    </div><!-- /#weatherSearch.container -->


{{ asset.vendorjs('vue/dist/vue.js') }}
{{ asset.vendorjs('vue-resource/dist/vue-resource.min.js') }}
{{ asset.vendorjs('lodash/dist/lodash.min.js') }}
{{ asset.vendorjs('moment/min/moment.min.js') }}
{{ asset.vendorjs('chart.js/dist/Chart.min.js') }}
{# asset.unpkg('vue-select') #}

<script>
  var DEFAULT_DATE = '20130101';
  var FORECAST_DAYS = 5;
  var SKIP_INCREMENT = FORECAST_DAYS;  // in days
  var ctx = document.getElementById("five-day-forecast");

  var chart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: _.range(0, FORECAST_DAYS),
      datasets: [
        {
          label: 'Low Temperatures (°F)',
          data:
            _.map(_.range(0, FORECAST_DAYS), function(x){ return 10*x + 15 }),
          backgroundColor: '#36a2eb',
        },
        {
          label: 'High Temperatures (°F)',
          data:
            _.map(_.range(0, FORECAST_DAYS), function(x){ return 10*x + 20 }),
          backgroundColor: '#ff6384'
        },
      ]
    },
    options: {
      maintainAspectRatio: true,
      responsive: true,
      scales: {
        yAxes: [{ stacked: false}]
      }
    }
  }); // new Chart


  var f = new Vue({
    el: '#weatherSearchForm',
    data: {
      theDate: null,
      resetEnabled: false,
      forecastDates: [],
      getDateFailed: false,
      dateSkipperEnabled: true,
      skipDays: SKIP_INCREMENT,
    },

    methods: {
      mounted: function() {
          c.updateChartTitle(this.skipDays);
      },

      getForecast: function(e) {
        this.$http.get('/forecast/' + this.theDate, {
          params: {
            limit: this.skipDays,
          }
        }).then(function(res) {
          this.forecastDates = res.data;
          // Update the Chart.js chart
          chart.data.labels =
            _.map(_.map(this.forecastDates, 'DATE'), this.isoDate);
          chart.data.datasets[0].data = _.map(this.forecastDates, 'TMIN');
          chart.data.datasets[1].data = _.map(this.forecastDates, 'TMAX');
          chart.update();
          c.updateChartTitle(this.skipDays);
          // Clear errors and enable the reset button
          this.resetEnabled = true;
          this.getDateFailed = false;
        }, function(res) {
          this.getDateFailed = true;
          console.log("Error fetching '" + this.theDate + "': " +
                      res.statusText);
        });
      }, // onenter

      enableResetButton: function(e) {
        this.resetEnabled = true;
      },

      resetForm: function(e) {
        this.theDate = '';
        this.resetEnabled = false;
        this.getDateFailed = false;
        this.forecastDates = [];
        this.skipDays = SKIP_INCREMENT;
        chart.data.datasets[0].data = [];
        chart.data.datasets[1].data = [];
        chart.update();
        c.resetChartTitle();
      },

      loadSampleData: function(e) {
        this.theDate = DEFAULT_DATE;
        this.getForecast();
      },

      yearSkipStart: function(e) {
        m = moment(this.theDate);
        if (m.dayOfYear() === 1) {
          this.theDate = m.year(m.year() - 1).format('YYYYMMDD')
        } else {
          this.theDate =
            moment(this.theDate).dayOfYear(1).format('YYYYMMDD');
        }
        this.getForecast();
      },

      daySkipPrev: function(e) {
        skipMoment = moment.duration(this.skipDays, 'days');
        this.theDate =
          moment(this.theDate).subtract(skipMoment).format('YYYYMMDD');
        this.getForecast();
      },

      daySkipNext: function(e) {
        skipMoment = moment.duration(this.skipDays, 'days');
        this.theDate =
          moment(this.theDate).add(skipMoment).format('YYYYMMDD');
        this.getForecast();
      },

      yearSkipEnd: function(e) {
        m = moment(this.theDate);
        daysInYear = m.isLeapYear() ? 366 : 365;
        startOfLastForecast = m.dayOfYear(daysInYear - this.skipDays + 1);

        // If already in the last week, skip to the last week of the next year
        if (m.diff(startOfLastForecast) <= this.skipDays) {
          this.theDate = m.year(m.year() + 1).format('YYYYMMDD');
        } else {
          this.theDate = startOfLastForecast.format('YYYYMMDD');
        }
        this.getForecast();
      },

      isoDate: function (date) {
        if (!date) return '';
        return moment(date).format('YYYY-MM-DD');
      },

      skipInEnglish: function(dir) {
        stems = [ 'zero', 'one', 'two', 'three', 'four', 'five', 'six',
                  'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve',
                  'thir', 'four', 'fif', 'six', 'seven', 'eigh', 'nine'];
        return 'Skip ' + dir + ' ' + stems[this.skipDays]
               + (this.skipDays > 12 ? 'teen' : '')
               + (this.skipDays !== 1 ? ' days' : 'day');
      },

      isFreezing: function(temp) {
        if (temp === '' || typeof(temp) === 'undefined') return '';
        return temp <= 32;
      },

      isSweltering: function(temp) {
        if (temp === '' || typeof(temp) === 'undefined') return '';
        return temp >= 90;
      },

    } // methods

  }); // f = new Vue

  var c = new Vue({
    el: '#chartTitle',
    data: {
      defaultTitle: 'Highs & Lows',
      chartTitle: 'Highs & Lows',
      chartDimmed: false,
    },
    methods: {
      mounted: function() {
        this.resetChartTitle();
      },

      resetChartTitle: function() {
        this.chartTitle = this.defaultTitle;
      },

      updateChartTitle: function(days) {
        this.chartTitle = this.daysInEnglish(days) + ' ' + this.defaultTitle;
      },

      daysInEnglish: function(days) {
        if (days > 19) return days + '-day';
        stems = [ 'Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six',
                  'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve',
                  'Thir', 'Four', 'Fif', 'Six', 'Seven', 'Eigh', 'Nine'];
        return stems[days] + (days > 12 ? 'teen' : '') + '-day';
      },
    },
  });

</script>
